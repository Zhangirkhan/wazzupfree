<?php

namespace App\Services\Messenger;

use App\Contracts\MessageProcessorInterface;
use App\Models\Chat;
use App\Models\Client;
use App\Models\Message;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;

class MessageProcessor implements MessageProcessorInterface
{
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
     */
    public function saveClientMessage(Chat $chat, string $message, Client $client, ?string $wazzupMessageId = null): Message
    {
        Log::info('üí¨ Saving client message', [
            'chat_id' => $chat->id,
            'client_id' => $client->id,
            'message' => substr($message, 0, 100) . (strlen($message) > 100 ? '...' : ''),
            'phone' => $chat->messenger_phone
        ]);

        $metadata = [
            'original_message' => $message,
            'client_id' => $client->id,
            'client_name' => $client->name,
            'direction' => 'incoming'
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º wazzup_message_id –µ—Å–ª–∏ –µ—Å—Ç—å
        if ($wazzupMessageId) {
            $metadata['wazzup_message_id'] = $wazzupMessageId;
        }

        $messageRecord = Message::create([
            'chat_id' => $chat->id,
            'user_id' => 1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            'content' => $message,
            'type' => 'text',
            'is_from_client' => true, // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            'messenger_message_id' => 'client_' . time() . '_' . rand(1000, 9999),
            'metadata' => $metadata
        ]);

        Log::info('‚úÖ Client message saved', [
            'message_id' => $messageRecord->id,
            'chat_id' => $chat->id
        ]);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Redis –¥–ª—è SSE
        $this->publishMessageToRedis($chat->id, $messageRecord);

        return $messageRecord;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
     */
    public function saveClientImage(Chat $chat, string $imageUrl, string $caption, Client $client, ?string $wazzupMessageId = null): Message
    {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º ImageService –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            $imageService = app(\App\Services\ImageService::class);
            $imageData = $imageService->saveImageFromUrl($imageUrl, $chat->id);

            if (!$imageData) {
                Log::error('Failed to save image', [
                    'chat_id' => $chat->id,
                    'image_url' => $imageUrl
                ]);
                throw new \Exception('Failed to save image');
            }

            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            $messageContent = !empty($caption) ? $caption : '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';

            $metadata = [
                'image_url' => $imageData['url'],
                'image_path' => $imageData['path'],
                'image_filename' => $imageData['filename'],
                'image_size' => $imageData['size'],
                'image_extension' => $imageData['extension'],
                'original_url' => $imageUrl,
                'caption' => $caption,
                'client_id' => $client->id,
                'client_name' => $client->name,
                'direction' => 'incoming'
            ];

            // –î–æ–±–∞–≤–ª—è–µ–º wazzup_message_id –µ—Å–ª–∏ –µ—Å—Ç—å
            if ($wazzupMessageId) {
                $metadata['wazzup_message_id'] = $wazzupMessageId;
            }

            $message = Message::create([
                'chat_id' => $chat->id,
                'user_id' => 1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'content' => $messageContent,
                'type' => 'image',
                'is_from_client' => true, // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                'metadata' => $metadata
            ]);

            // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Redis –¥–ª—è SSE
            $this->publishMessageToRedis($chat->id, $message);

            Log::info('Client image saved successfully', [
                'chat_id' => $chat->id,
                'image_url' => $imageData['url'],
                'caption' => $caption
            ]);

            return $message;

        } catch (\Exception $e) {
            Log::error('Error saving client image', [
                'chat_id' => $chat->id,
                'image_url' => $imageUrl,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            throw $e;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
     */
    public function saveClientVideo(Chat $chat, string $videoUrl, string $caption, Client $client): Message
    {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º VideoService –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
            $videoService = app(\App\Services\VideoService::class);
            $videoData = $videoService->saveVideoFromUrl($videoUrl, $chat->id);

            if (!$videoData) {
                Log::error('Failed to save video', [
                    'chat_id' => $chat->id,
                    'video_url' => $videoUrl
                ]);
                throw new \Exception('Failed to save video');
            }

            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ
            $messageContent = !empty($caption) ? $caption : '–í–∏–¥–µ–æ';

            $message = Message::create([
                'chat_id' => $chat->id,
                'user_id' => 1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'content' => $messageContent,
                'type' => 'video',
                'is_from_client' => true, // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                'metadata' => [
                    'video_url' => $videoData['url'],
                    'video_path' => $videoData['path'],
                    'video_filename' => $videoData['filename'],
                    'video_size' => $videoData['size'],
                    'video_extension' => $videoData['extension'],
                    'original_url' => $videoUrl,
                    'caption' => $caption,
                    'client_name' => $client->id,
                    'direction' => 'incoming'
                ]
            ]);

            // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Redis –¥–ª—è SSE
            $this->publishMessageToRedis($chat->id, $message);

            Log::info('Client video saved successfully', [
                'chat_id' => $chat->id,
                'video_url' => $videoData['url'],
                'caption' => $caption
            ]);

            return $message;

        } catch (\Exception $e) {
            Log::error('Error saving client video', [
                'chat_id' => $chat->id,
                'video_url' => $videoUrl,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            throw $e;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
     */
    public function saveClientAudio(Chat $chat, string $audioUrl, string $caption, Client $client): Message
    {
        try {
            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ (–ø–æ–∫–∞ —á—Ç–æ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞)
            $messageContent = !empty($caption) ? $caption : '–ê—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ';

            $message = Message::create([
                'chat_id' => $chat->id,
                'user_id' => 1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'content' => $messageContent,
                'type' => 'audio',
                'is_from_client' => true, // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                'metadata' => [
                    'audio_url' => $audioUrl,
                    'original_url' => $audioUrl,
                    'caption' => $caption,
                    'client_name' => $client->id,
                    'direction' => 'incoming'
                ]
            ]);

            // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Redis –¥–ª—è SSE
            $this->publishMessageToRedis($chat->id, $message);

            Log::info('Client audio saved successfully', [
                'chat_id' => $chat->id,
                'audio_url' => $audioUrl,
                'caption' => $caption
            ]);

            return $message;

        } catch (\Exception $e) {
            Log::error('Error saving client audio', [
                'chat_id' => $chat->id,
                'audio_url' => $audioUrl,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            throw $e;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
     */
    public function saveClientSticker(Chat $chat, string $stickerUrl, string $caption, Client $client): Message
    {
        try {
            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∏–∫–µ—Ä–æ–º
            $messageContent = !empty($caption) ? $caption : '–°—Ç–∏–∫–µ—Ä';

            $message = Message::create([
                'chat_id' => $chat->id,
                'user_id' => 1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'content' => $messageContent,
                'type' => 'sticker',
                'is_from_client' => true, // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                'metadata' => [
                    'sticker_url' => $stickerUrl,
                    'original_url' => $stickerUrl,
                    'caption' => $caption,
                    'client_name' => $client->id,
                    'direction' => 'incoming'
                ]
            ]);

            // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Redis –¥–ª—è SSE
            $this->publishMessageToRedis($chat->id, $message);

            Log::info('Client sticker saved successfully', [
                'chat_id' => $chat->id,
                'sticker_url' => $stickerUrl,
                'caption' => $caption
            ]);

            return $message;

        } catch (\Exception $e) {
            Log::error('Error saving client sticker', [
                'chat_id' => $chat->id,
                'sticker_url' => $stickerUrl,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            throw $e;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
     */
    public function saveClientDocument(Chat $chat, string $documentUrl, string $documentName, string $caption, Client $client): Message
    {
        try {
            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
            $messageContent = !empty($caption) ? $caption : '–î–æ–∫—É–º–µ–Ω—Ç: ' . $documentName;

            $message = Message::create([
                'chat_id' => $chat->id,
                'user_id' => 1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'content' => $messageContent,
                'type' => 'document',
                'is_from_client' => true, // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                'metadata' => [
                    'document_url' => $documentUrl,
                    'document_name' => $documentName,
                    'original_url' => $documentUrl,
                    'caption' => $caption,
                    'client_name' => $client->id,
                    'direction' => 'incoming'
                ]
            ]);

            // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Redis –¥–ª—è SSE
            $this->publishMessageToRedis($chat->id, $message);

            Log::info('Client document saved successfully', [
                'chat_id' => $chat->id,
                'document_url' => $documentUrl,
                'document_name' => $documentName,
                'caption' => $caption
            ]);

            return $message;

        } catch (\Exception $e) {
            Log::error('Error saving client document', [
                'chat_id' => $chat->id,
                'document_url' => $documentUrl,
                'document_name' => $documentName,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            throw $e;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
     */
    public function saveClientLocation(Chat $chat, float $latitude, float $longitude, string $address, Client $client): Message
    {
        try {
            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
            $messageContent = !empty($address) ? $address : "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {$latitude}, {$longitude}";

            $message = Message::create([
                'chat_id' => $chat->id,
                'user_id' => 1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'content' => $messageContent,
                'type' => 'location',
                'is_from_client' => true, // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                'metadata' => [
                    'latitude' => $latitude,
                    'longitude' => $longitude,
                    'address' => $address,
                    'client_name' => $client->id,
                    'direction' => 'incoming'
                ]
            ]);

            // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Redis –¥–ª—è SSE
            $this->publishMessageToRedis($chat->id, $message);

            Log::info('Client location saved successfully', [
                'chat_id' => $chat->id,
                'latitude' => $latitude,
                'longitude' => $longitude,
                'address' => $address
            ]);

            return $message;

        } catch (\Exception $e) {
            Log::error('Error saving client location', [
                'chat_id' => $chat->id,
                'latitude' => $latitude,
                'longitude' => $longitude,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            throw $e;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
     */
    public function sendMessage(Chat $chat, string $message): void
    {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –Ω–∞ 100 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –ø–æ–∑–∂–µ
            // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º 100ms –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            $lastMessage = Message::where('chat_id', $chat->id)->orderBy('created_at', 'desc')->first();
            $systemMessageTime = $lastMessage ?
                $lastMessage->created_at->addMilliseconds(200) :
                now()->addMilliseconds(200);

            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º —á–µ—Ä–µ–∑ DB::table –¥–ª—è –æ–±—Ö–æ–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö timestamps
            $messageId = DB::table('messages')->insertGetId([
                'chat_id' => $chat->id,
                'user_id' => 1, // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                'content' => $message,
                'type' => 'system', // –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
                'is_from_client' => false, // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
                'messenger_message_id' => 'bot_' . time() . '_' . rand(1000, 9999),
                'created_at' => $systemMessageTime->format('Y-m-d H:i:s.v'),
                'updated_at' => $systemMessageTime->format('Y-m-d H:i:s.v'),
                'metadata' => json_encode([
                    'direction' => 'outgoing',
                    'is_bot_message' => true,
                    'sender' => '–°–∏—Å—Ç–µ–º–∞'
                ])
            ]);

            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            $messageRecord = Message::find($messageId);

            Log::info("System message saved", ['chat_id' => $chat->id]);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Redis –¥–ª—è SSE
            $this->publishMessageToRedis($chat->id, $messageRecord);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Wazzup24
            if (class_exists('\App\Services\Wazzup24Service') && $chat->organization) {
                try {
                    $wazzupService = \App\Services\Wazzup24Service::forOrganization($chat->organization);

                    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    $channelId = $wazzupService->getChannelId();
                    $chatType = 'whatsapp';
                    $chatId = $chat->messenger_phone;

                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è WhatsApp —Å –∂–∏—Ä–Ω–æ–π –Ω–∞–¥–ø–∏—Å—å—é "–°–∏—Å—Ç–µ–º–∞"
                    $formattedMessage = "*–°–∏—Å—Ç–µ–º–∞*\n\n" . $message;

                    $result = $wazzupService->sendMessage(
                        $channelId,
                        $chatType,
                        $chatId,
                        $formattedMessage,
                        1, // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                        $messageRecord->id
                    );
                } catch (\Exception $e) {
                    Log::error('Failed to create Wazzup24Service for organization', [
                        'chat_id' => $chat->id,
                        'organization_id' => $chat->organization_id,
                        'error' => $e->getMessage()
                    ]);
                    $result = ['success' => false, 'error' => $e->getMessage()];
                }

                if ($result['success']) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID –æ—Ç Wazzup24
                    $messageRecord->update([
                        'wazzup_message_id' => $result['message_id'] ?? null,
                        'metadata' => array_merge($messageRecord->metadata ?? [], [
                            'wazzup_sent' => true,
                            'wazzup_message_id' => $result['message_id'] ?? null
                        ])
                    ]);

                    Log::info("System message sent via Wazzup24", [
                        'chat_id' => $chat->id,
                        'wazzup_id' => $result['message_id'] ?? null
                    ]);
                } else {
                    Log::error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Wazzup24", [
                        'chat_id' => $chat->id,
                        'message_id' => $messageRecord->id,
                        'error' => $result['error'] ?? 'Unknown error'
                    ]);
                }
            } else {
                Log::warning("Wazzup24Service –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ", [
                    'chat_id' => $chat->id,
                    'message_id' => $messageRecord->id
                ]);
            }

        } catch (\Exception $e) {
            Log::error("–û—à–∏–±–∫–∞ –≤ sendMessage: " . $e->getMessage(), [
                'chat_id' => $chat->id,
                'trace' => $e->getTraceAsString()
            ]);
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
     */
    public function notifyDepartment(Chat $chat, string $message): void
    {
        $department = $chat->department;

        if (!$department) {
            Log::warning("–û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —á–∞—Ç–∞ {$chat->id}");
            return;
        }

        $users = $department->users;

        if ($users->isEmpty()) {
            Log::warning("–í –æ—Ç–¥–µ–ª–µ {$department->name} –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
            return;
        }

        foreach ($users as $user) {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (email, push, etc.)
            Log::info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {$user->name} –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ {$chat->id}");
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public function notifyAssignedUser(Chat $chat, string $message): void
    {
        $user = $chat->assignedTo;
        if ($user) {
            Log::info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {$user->name} –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ {$chat->id}");
        }
    }

    /**
     * –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis –¥–ª—è SSE
     */
    private function publishMessageToRedis(int $chatId, Message $message): void
    {
        try {
            $redis = app('redis');
            $channel = "chat:{$chatId}";
            $data = [
                'type' => 'message',
                'message' => [
                    'id' => $message->id,
                    'content' => $message->content,
                    'type' => $message->type,
                    'is_from_client' => $message->is_from_client,
                    'created_at' => $message->created_at->toISOString(),
                    'metadata' => $message->metadata
                ]
            ];
            
            $redis->publish($channel, json_encode($data));
        } catch (\Exception $e) {
            Log::error('Failed to publish message to Redis', [
                'chat_id' => $chatId,
                'message_id' => $message->id,
                'error' => $e->getMessage()
            ]);
        }
    }
}
