<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Chat;
use App\Services\MessengerService;
use Carbon\Carbon;
use Illuminate\Support\Facades\Log;

class AutoCloseChats extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'chats:auto-close {--dry-run : –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ —á–∞—Ç—ã –±—É–¥—É—Ç –∑–∞–∫—Ä—ã—Ç—ã –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üïê –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–æ–≤ (–∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤)');
        
        // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã —Å—Ç–∞—Ä—à–µ 8 —á–∞—Å–æ–≤
        $cutoffTime = Carbon::now()->subHours(8);
        
        $chatsToClose = Chat::where('messenger_status', 'active')
            ->where('updated_at', '<', $cutoffTime)
            ->where('is_messenger_chat', true)
            ->with(['assignedTo', 'department'])
            ->get();

        $this->info("–ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è: {$chatsToClose->count()}");

        if ($chatsToClose->count() === 0) {
            $this->info('‚úÖ –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è');
            return 0;
        }

        $messengerService = app(MessengerService::class);
        $closedCount = 0;
        $errorCount = 0;

        foreach ($chatsToClose as $chat) {
            $this->line("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Ç {$chat->id}: {$chat->title}");
            $this->line("  –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {$chat->updated_at}");
            $this->line("  –ù–∞–∑–Ω–∞—á–µ–Ω: " . ($chat->assignedTo ? $chat->assignedTo->name : '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'));
            $this->line("  –û—Ç–¥–µ–ª: " . ($chat->department ? $chat->department->name : '–Ω–µ –≤—ã–±—Ä–∞–Ω'));

            if ($this->option('dry-run')) {
                $this->line("  [DRY RUN] –ë—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç");
                continue;
            }

            try {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —á–µ—Ä–µ–∑ MessengerService
                $result = $messengerService->closeChat(
                    $chat->id, 
                    1, // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ (8 —á–∞—Å–æ–≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)'
                );

                if ($result['success']) {
                    $this->line("  ‚úÖ –ó–∞–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ");
                    $closedCount++;
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    Log::info('Chat auto-closed for statistics', [
                        'chat_id' => $chat->id,
                        'manager_id' => $chat->assigned_to,
                        'department_id' => $chat->department_id,
                        'duration_hours' => $chat->created_at->diffInHours($chat->updated_at),
                        'messages_count' => $chat->messages()->count()
                    ]);
                } else {
                    $this->error("  ‚ùå –û—à–∏–±–∫–∞: {$result['error']}");
                    $errorCount++;
                }
            } catch (\Exception $e) {
                $this->error("  ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {$e->getMessage()}");
                $errorCount++;
            }
        }

        if (!$this->option('dry-run')) {
            $this->info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
            $this->info("–ó–∞–∫—Ä—ã—Ç–æ —á–∞—Ç–æ–≤: {$closedCount}");
            $this->info("–û—à–∏–±–æ–∫: {$errorCount}");
            
            // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            Log::info('Auto-close chats completed', [
                'total_processed' => $chatsToClose->count(),
                'closed_successfully' => $closedCount,
                'errors' => $errorCount
            ]);
        } else {
            $this->info("üìã DRY RUN –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {$chatsToClose->count()} —á–∞—Ç–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è");
        }

        return 0;
    }
}