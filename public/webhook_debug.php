<?php
/**
 * üîç –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook'–æ–≤
 * –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */

error_reporting(E_ALL);
ini_set('display_errors', 1);

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø—É—Ç–∏
$basePath = __DIR__;
$logPath = $basePath . '/storage/logs/laravel.log';

// HTML –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
if (php_sapi_name() !== 'cli') {
    echo "<!DOCTYPE html><html><head><meta charset='utf-8'>";
    echo "<title>üîç Webhook Monitor</title>";
    echo "<style>
        body { font-family: monospace; background: #1a1a1a; color: #00ff00; padding: 20px; }
        .error { color: #ff0000; }
        .warning { color: #ffff00; }
        .info { color: #00ffff; }
        .success { color: #00ff00; }
        .box { border: 1px solid #444; padding: 15px; margin: 10px 0; background: #2a2a2a; }
        pre { white-space: pre-wrap; word-wrap: break-word; }
        .btn { background: #007700; color: white; border: none; padding: 8px 16px; margin: 5px; cursor: pointer; }
        .btn:hover { background: #009900; }
    </style></head><body>";
    echo "<h1>üîç Webhook Monitor</h1>";
}

$action = $_GET['action'] ?? $_POST['action'] ?? 'status';

echo "üïê " . date('Y-m-d H:i:s') . "\n";
echo "================================\n\n";

switch ($action) {
    case 'status':
        showStatus();
        break;
    case 'test':
        sendTestWebhook();
        break;
    case 'logs':
        showRecentLogs();
        break;
    case 'errors':
        showErrors();
        break;
    case 'clear':
        clearLogs();
        break;
    case 'endpoints':
        showEndpoints();
        break;
    default:
        showMenu();
        break;
}

function showStatus() {
    global $logPath;

    echo "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã webhook'–æ–≤:\n";
    echo "=============================\n\n";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤
    if (file_exists($logPath)) {
        $fileSize = filesize($logPath);
        $lastModified = date('Y-m-d H:i:s', filemtime($logPath));
        echo "‚úÖ –§–∞–π–ª –ª–æ–≥–æ–≤: –Ω–∞–π–¥–µ–Ω\n";
        echo "üìÅ –†–∞–∑–º–µ—Ä: " . formatBytes($fileSize) . "\n";
        echo "üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {$lastModified}\n";

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏
        $content = file_get_contents($logPath);
        $webhookCount = substr_count($content, '=== WEBHOOK RECEIVED ===');
        $errorCount = substr_count($content, 'ERROR');
        $testCount = substr_count($content, 'TEST WEBHOOK');

        echo "üì° –í—Å–µ–≥–æ webhook'–æ–≤: {$webhookCount}\n";
        echo "üß™ –¢–µ—Å—Ç–æ–≤—ã—Ö: {$testCount}\n";
        echo "‚ùå –û—à–∏–±–æ–∫: {$errorCount}\n";
        echo "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: " . ($webhookCount - $errorCount) . "\n";

    } else {
        echo "‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {$logPath}\n";
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å endpoint'–æ–≤
    echo "\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint'–æ–≤:\n";
    echo "========================\n";

    $endpoints = [
        '–û—Å–Ω–æ–≤–Ω–æ–π webhook' => 'https://back-chat.ap.kz/api/webhooks/wazzup24',
        '–¢–µ—Å—Ç–æ–≤—ã–π endpoint' => 'https://back-chat.ap.kz/api/webhooks/wazzup24?test=1'
    ];

    foreach ($endpoints as $name => $url) {
        $status = checkEndpoint($url);
        echo ($status ? "‚úÖ" : "‚ùå") . " {$name}: " . ($status ? "–¥–æ—Å—Ç—É–ø–µ–Ω" : "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω") . "\n";
    }
}

function sendTestWebhook() {
    echo "üß™ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook'–∞:\n";
    echo "===============================\n\n";

    $url = 'https://back-chat.ap.kz/api/webhooks/wazzup24';
    $data = ['test' => true];

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json',
        'User-Agent: WebhookDebug/1.0'
    ]);
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);

    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $error = curl_error($ch);
    curl_close($ch);

    if ($error) {
        echo "‚ùå –û—à–∏–±–∫–∞ cURL: {$error}\n";
    } else {
        echo "üì° URL: {$url}\n";
        echo "üìä HTTP –∫–æ–¥: {$httpCode}\n";
        echo "üì• –û—Ç–≤–µ—Ç: {$response}\n";
        echo ($httpCode == 200 ? "‚úÖ" : "‚ùå") . " –°—Ç–∞—Ç—É—Å: " . ($httpCode == 200 ? "—É—Å–ø–µ—à–Ω–æ" : "–æ—à–∏–±–∫–∞") . "\n";
    }
}

function showRecentLogs() {
    global $logPath;

    echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ webhook'–æ–≤:\n";
    echo "===============================\n\n";

    if (!file_exists($logPath)) {
        echo "‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
        return;
    }

    $command = "tail -n 100 '{$logPath}' | grep -E '(WEBHOOK|webhook)' | tail -n 20";
    $output = shell_exec($command);

    if (empty($output)) {
        echo "‚ÑπÔ∏è  –ó–∞–ø–∏—Å–∏ webhook'–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n";
    } else {
        echo "<pre>" . htmlspecialchars($output) . "</pre>\n";
    }
}

function showErrors() {
    global $logPath;

    echo "‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:\n";
    echo "====================\n\n";

    if (!file_exists($logPath)) {
        echo "‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
        return;
    }

    $command = "tail -n 500 '{$logPath}' | grep -E '(ERROR.*webhook|webhook.*ERROR)' -i | tail -n 10";
    $output = shell_exec($command);

    if (empty($output)) {
        echo "‚úÖ –û—à–∏–±–∫–∏ webhook'–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!\n";
    } else {
        echo "<pre class='error'>" . htmlspecialchars($output) . "</pre>\n";
    }
}

function clearLogs() {
    global $logPath;

    echo "üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤:\n";
    echo "=================\n\n";

    if (file_exists($logPath)) {
        $backupPath = $logPath . '.backup.' . date('Y-m-d-H-i-s');
        if (copy($logPath, $backupPath)) {
            echo "üíæ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {$backupPath}\n";
            if (file_put_contents($logPath, '')) {
                echo "‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã\n";
            } else {
                echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏\n";
            }
        } else {
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø\n";
        }
    } else {
        echo "‚ÑπÔ∏è  –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
    }
}

function showEndpoints() {
    echo "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ webhook endpoint'—ã:\n";
    echo "===============================\n\n";

    $endpoints = [
        '–û—Å–Ω–æ–≤–Ω–æ–π Wazzup24 webhook' => [
            'url' => 'https://back-chat.ap.kz/api/webhooks/wazzup24',
            'methods' => 'GET, POST',
            'description' => '–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è webhook\'–æ–≤ –æ—Ç Wazzup24'
        ],
        'Webhook –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏' => [
            'url' => 'https://back-chat.ap.kz/api/webhooks/organization/{slug}',
            'methods' => 'GET, POST',
            'description' => 'Webhook –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
        ]
    ];

    foreach ($endpoints as $name => $info) {
        echo "üìç {$name}:\n";
        echo "   URL: {$info['url']}\n";
        echo "   –ú–µ—Ç–æ–¥—ã: {$info['methods']}\n";
        echo "   –û–ø–∏—Å–∞–Ω–∏–µ: {$info['description']}\n\n";
    }

    echo "üîó –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n";
    echo "   curl -X POST https://back-chat.ap.kz/api/webhooks/wazzup24 -H 'Content-Type: application/json' -d '{\"test\":true}'\n";
}

function showMenu() {
    echo "üîç –ú–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ webhook'–æ–≤:\n";
    echo "===============================\n\n";

    if (php_sapi_name() !== 'cli') {
        echo "<div class='box'>";
        echo "<button class='btn' onclick=\"location.href='?action=status'\">üìä –°—Ç–∞—Ç—É—Å</button>";
        echo "<button class='btn' onclick=\"location.href='?action=test'\">üß™ –¢–µ—Å—Ç</button>";
        echo "<button class='btn' onclick=\"location.href='?action=logs'\">üìã –õ–æ–≥–∏</button>";
        echo "<button class='btn' onclick=\"location.href='?action=errors'\">‚ùå –û—à–∏–±–∫–∏</button>";
        echo "<button class='btn' onclick=\"location.href='?action=endpoints'\">üåê Endpoint'—ã</button>";
        echo "</div>";
    } else {
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n";
        echo "  php webhook_debug.php status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å\n";
        echo "  php webhook_debug.php test      - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç\n";
        echo "  php webhook_debug.php logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏\n";
        echo "  php webhook_debug.php errors    - –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏\n";
        echo "  php webhook_debug.php endpoints - –ü–æ–∫–∞–∑–∞—Ç—å endpoint'—ã\n";
    }
}

function checkEndpoint($url) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 5);
    curl_setopt($ch, CURLOPT_NOBODY, true);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);

    $result = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    return $httpCode >= 200 && $httpCode < 400;
}

function formatBytes($size, $precision = 2) {
    $units = ['B', 'KB', 'MB', 'GB'];

    for ($i = 0; $size > 1024 && $i < count($units) - 1; $i++) {
        $size /= 1024;
    }

    return round($size, $precision) . ' ' . $units[$i];
}

if (php_sapi_name() !== 'cli') {
    echo "</body></html>";
}
?>
